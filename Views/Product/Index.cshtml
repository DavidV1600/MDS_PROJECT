@model MDS_PROJECT.Controllers.ProductController.SearchViewModel

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-OERcA2mA7U6Tz8oWbklKepL0LGV6MyCAp6xQmKQ4iNuORm1gYkPi7dBIYlGq2D3T" crossorigin="anonymous">
    <style>
        body {
            background-color: #333;
            color: white;
        }

        .form-label {
            margin-top: 10px;
        }

        .cart-item {
            border: 1px solid #555;
            padding: 10px;
            margin-bottom: 10px;
        }

        h1, h2 {
            color: white;
        }

        .totals a {
            color: lightgreen;
            text-decoration: none;
        }

            .totals a:hover {
                text-decoration: underline;
            }

    </style>
</head>
<body>
    <!-- HTML Form -->
    <div class="container mt-4">
        <form asp-controller="Product" asp-action="SearchBoth" method="post" class="row g-3">
            <div class="col-auto">
                <input type="text" name="query" class="form-control" placeholder="Caută un produs...">
            </div>
            <div class="col-auto">
                <input type="text" name="quantity" class="form-control" placeholder="Enter quantity (e.g., 1.5 or 1,5)">
            </div>
            <div class="col-auto">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="exactItemName" value="True">
                    <label class="form-check-label" for="exactItemName">Exact Item Name</label>
                </div>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary mb-3">Caută</button>
            </div>
        </form>

        <!-- Results Section -->
        <div class="results-container mt-5">
            <div class="results">
                <h2><a href="javascript:void(0)" onclick="redirectToMaps('Carrefour')">Carrefour</a></h2>
                @if (Model != null && Model.CarrefourResults != null && Model.CarrefourResults.Any())
                {
                    <div class="mb-3">
                        <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByPrice()">Sort by Price</button>
                        <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByName()">Sort by Name</button>
                        <button class="btn btn-secondary btn-sm" onclick="sortCarrefourResultsByQuantity()">Sort by Quantity</button>
                    </div>
                    <ul id="carrefour-results" class="product-list">
                        @foreach (var item in Model.CarrefourResults)
                        {
                            <li class="carrefour-item" data-quantity="@item.Quantity" data-price="@item.Price">@item.ItemName, @item.Quantity @item.MeasureQuantity, @item.Price Lei</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="no-results">Nu s-au găsit rezultate pentru Carrefour.</p>
                }
            </div>

            <div class="results">
                <h2><a href="javascript:void(0)" onclick="redirectToMaps('Kaufland')">Kaufland</a></h2>
                @if (Model != null && Model.KauflandResults != null && Model.KauflandResults.Any())
                {
                    <div class="mb-3">
                        <button class="btn btn-secondary btn-sm" onclick="sortKauflandResultsByPrice()">Sort by Price</button>
                        <button class="btn btn-secondary btn-sm" onclick="sortKauflandResultsByName()">Sort by Name</button>
                        <button class="btn btn-secondary btn-sm" onclick="sortKauflandResultsByQuantity()">Sort by Quantity</button>
                    </div>
                    <ul id="kaufland-results" class="product-list">
                        @foreach (var item in Model.KauflandResults)
                        {
                            <li class="kaufland-item" data-quantity="@item.Quantity" data-price="@item.Price">@item.ItemName, @item.Quantity @item.MeasureQuantity, @item.Price Lei</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="no-results">Nu s-au găsit rezultate pentru Kaufland.</p>
                }
            </div>
        </div>
    </div>

    <script>
        function redirectToMaps(store) {
            window.location.href = "/Maps?store=" + store;
        }

        function getPriceValue(itemText) {
            var numbers = itemText.match(/\d+([.,]\d+)?/g);
            return parseFloat(numbers[numbers.length - 1].replace(",", "."));
        }

        function getQuantityValue(itemText) {
            var numbers = itemText.match(/\d+([.,]\d+)?/g);
            return parseFloat(numbers[numbers.length - 2].replace(",", "."));
        }

        var carrefourSortByPriceAsc = true;
        var carrefourSortByNameAsc = true;
        var carrefourSortByQuantityAsc = true;

        function sortCarrefourResultsByPrice() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var priceA = getPriceValue(a.innerText);
                var priceB = getPriceValue(b.innerText);
                return carrefourSortByPriceAsc ? priceA - priceB : priceB - priceA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByPriceAsc = !carrefourSortByPriceAsc;
        }

        function sortCarrefourResultsByName() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var nameA = a.innerText.split(",")[0].trim();
                var nameB = b.innerText.split(",")[0].trim();
                return carrefourSortByNameAsc ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByNameAsc = !carrefourSortByNameAsc;
        }

        function sortCarrefourResultsByQuantity() {
            var ul = document.getElementById("carrefour-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var quantityA = getQuantityValue(a.innerText);
                var quantityB = getQuantityValue(b.innerText);
                return carrefourSortByQuantityAsc ? quantityA - quantityB : quantityB - quantityA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            carrefourSortByQuantityAsc = !carrefourSortByQuantityAsc;
        }

        var kauflandSortByPriceAsc = true;
        var kauflandSortByNameAsc = true;
        var kauflandSortByQuantityAsc = true;

        function sortKauflandResultsByPrice() {
            var ul = document.getElementById("kaufland-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var priceA = getPriceValue(a.innerText);
                var priceB = getPriceValue(b.innerText);
                return kauflandSortByPriceAsc ? priceA - priceB : priceB - priceA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            kauflandSortByPriceAsc = !kauflandSortByPriceAsc;
        }

        function sortKauflandResultsByName() {
            var ul = document.getElementById("kaufland-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var nameA = a.innerText.split(",")[0].trim();
                var nameB = b.innerText.split(",")[0].trim();
                return kauflandSortByNameAsc ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            kauflandSortByNameAsc = !kauflandSortByNameAsc;
        }

        function sortKauflandResultsByQuantity() {
            var ul = document.getElementById("kaufland-results");
            var items = ul.getElementsByTagName("li");
            var sortedItems = Array.from(items).sort(function (a, b) {
                var quantityA = getQuantityValue(a.innerText);
                var quantityB = getQuantityValue(b.innerText);
                return kauflandSortByQuantityAsc ? quantityA - quantityB : quantityB - quantityA;
            });
            for (var i = 0; i < sortedItems.length; i++) {
                ul.appendChild(sortedItems[i]);
            }
            kauflandSortByQuantityAsc = !kauflandSortByQuantityAsc;
        }
    </script>
</body>
</html>
