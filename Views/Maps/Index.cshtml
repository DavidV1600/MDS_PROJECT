<!DOCTYPE html>
<html>
<head>
    <title>Google Maps Example</title>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB1gTiBHMbS3O3WHTVhvZ0vVmNGwAZIQDw&amp&libraries=places,geometry"></script>
</head>
<body>
    <div id="map" style="height: 400px;"></div>
    <div>
        <label for="mode">Choose mode of transportation:</label>
        <select id="mode">
            <option value="DRIVING">Driving</option>
            <option value="WALKING">Walking</option>
            <option value="BICYCLING">Bicycling</option>
            <option value="TRANSIT">Transit</option>
        </select>
        <div id="info"></div>
    </div>

    <script>
        let map;
        let userLocationMarker;
        let directionsService;
        let directionsRenderer;
        let markersArray = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 15,
                mapTypeControl: false
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);

            const store = getParameterByName('store');
            if (!store) {
                console.error('Store parameter is missing in the URL');
                return;
            }

            const storedAddress = localStorage.getItem("userAddress");
            if (storedAddress) {
                geocodeAddress(storedAddress, store);
            } else {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        const userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        setUserLocation(userLocation, store);
                    }, function () {
                        handleLocationError(true, map.getCenter());
                    });
                } else {
                    handleLocationError(false, map.getCenter());
                }
            }

            document.getElementById('mode').addEventListener('change', function () {
                calculateAndDisplayRoute();
            });
        }

        function getParameterByName(name) {
            const url = window.location.href;
            name = name.replace(/[\[\]]/g, '\\$&');
            const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
            const results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }

        function geocodeAddress(address, store) {
            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {
                    const userLocation = results[0].geometry.location;
                    setUserLocation(userLocation, store);
                } else {
                    console.error('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        function setUserLocation(userLocation, store) {
            map.setCenter(userLocation);
            userLocationMarker = new google.maps.Marker({
                position: userLocation,
                map: map,
                title: 'Your Location',
                icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                }
            });

            searchPlaces(store, userLocation);
        }

        function searchPlaces(query, userLocation) {
            const service = new google.maps.places.PlacesService(map);
            service.textSearch({
                query: query,
                location: userLocation,
                radius: 5000 // Search within 5km radius
            }, function (results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    const filteredResults = results.filter(result => result.name.toLowerCase().includes(query.toLowerCase()));
                    const closestMarket = findClosestMarket(userLocation, filteredResults);
                    if (closestMarket) {
                        createMarkerAndCalculateRoute(closestMarket);
                    }
                } else {
                    console.error('Places search failed:', status);
                }
            });
        }

        function findClosestMarket(userLocation, markets) {
            let closestMarket = null;
            let shortestDistance = Number.MAX_VALUE;

            markets.forEach(function (market) {
                const distance = google.maps.geometry.spherical.computeDistanceBetween(userLocation, market.geometry.location);
                if (distance < shortestDistance) {
                    closestMarket = market;
                    shortestDistance = distance;
                }
            });

            return closestMarket;
        }

        function createMarkerAndCalculateRoute(market) {
            const marker = new google.maps.Marker({
                map: map,
                title: market.name,
                position: market.geometry.location
            });

            markersArray.push(marker);

            calculateAndDisplayRoute(marker.getPosition());
        }

        function calculateAndDisplayRoute(destination) {
            const selectedMode = document.getElementById('mode').value;
            const start = userLocationMarker.getPosition();
            const request = {
                origin: start,
                destination: destination || markersArray[0].getPosition(),
                travelMode: google.maps.TravelMode[selectedMode]
            };
            directionsService.route(request, function (result, status) {
                if (status == 'OK') {
                    directionsRenderer.setDirections(result);
                    displayRouteInfo(result);
                } else {
                    console.error('Directions request failed:', status);
                }
            });
        }

        function displayRouteInfo(result) {
            const route = result.routes[0];
            const infoPanel = document.getElementById('info');
            const distance = route.legs[0].distance.text;
            const duration = route.legs[0].duration.text;
            infoPanel.innerHTML = 'Distance: ' + distance + '<br>Duration: ' + duration;
        }

        function handleLocationError(browserHasGeolocation, pos) {
            console.error(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            map.setCenter(pos);
        }

        initMap();
    </script>
</body>
</html>
